{"version":3,"file":"6.68745ab3f92ebc8f197a.hot-update.js","sources":["webpack:///components/Slider/Slider.js","webpack:///./node_modules/lethargy/lethargy.js"],"sourcesContent":["import React from 'react';\r\nimport styles from './slider.scss';\r\nimport Slide from '../Slide';\r\nimport ReactTransitionGroup from 'react-addons-transition-group'\r\nimport {gql} from \"apollo-boost\";\r\nimport {graphql} from \"react-apollo\";\r\nimport IconButton from \"../IconButton/IconButton\";\r\nimport Arrow from \"../Icon/Arrow\";\r\nimport {TweenMax} from \"gsap\";\r\nimport {Lethargy} from 'lethargy';\r\n\r\nclass Slider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            current: 0,\r\n            direction: null,\r\n            total: props.data.collections.length\r\n        };\r\n\r\n        this.isAnimating = false;\r\n        this.dist = 0;\r\n        this.lethargy = new Lethargy();\r\n\r\n        this.navigate = this.navigate.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.wheel = this.wheel.bind(this);\r\n        this.onEndAnimation = this.onEndAnimation.bind(this);\r\n        this.start = this.start.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.end = this.end.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.wheel);\r\n    }\r\n\r\n    handleClick({target: {value}}) {\r\n        this.navigate(value)\r\n    }\r\n\r\n    navigate(dir = 'next') {\r\n        if (this.isAnimating) return false;\r\n\r\n        this.isAnimating = true;\r\n\r\n        let {current, total} = this.state;\r\n\r\n        this.setState({\r\n            current: dir === 'next' ?\r\n                current < total - 1 ? current + 1 : 0 :\r\n                current > 0 ? current - 1 : total - 1,\r\n            direction: dir\r\n        });\r\n    }\r\n\r\n    onEndAnimation() {\r\n        this.isAnimating = false;\r\n    }\r\n\r\n    wheel(e) {\r\n        if (this.lethargy.check(e) !== false) {\r\n\r\n            const dir = e.deltaY > 0 ? 'next' : 'prev';\r\n\r\n            this.navigate(dir);\r\n        }\r\n    };\r\n\r\n    start(e) {\r\n        let touches = e.changedTouches ? e.changedTouches[0] : e;\r\n        this.last = touches.clientX;\r\n    }\r\n\r\n    move(e) {\r\n    }\r\n\r\n    end(e) {\r\n\r\n        let touches = e.changedTouches ? e.changedTouches[0] : e;\r\n        this.dist = touches.clientX - this.last;\r\n\r\n        this.dist = Math.abs(this.dist) || 0;\r\n\r\n        if (this.dist < 100) return;\r\n\r\n        e.stopPropagation();\r\n\r\n        console.log('start', this.last, Math.abs(this.dist), 'end', touches.clientX);\r\n\r\n        if (this.last > touches.clientX) {\r\n            this.navigate('next')\r\n        } else {\r\n            this.navigate('prev')\r\n        }\r\n\r\n        this.last = touches.clientX;\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.wheel);\r\n    }\r\n\r\n    render() {\r\n        const {current, direction, total} = this.state;\r\n        const {data: {collections, types}} = this.props;\r\n        return (\r\n            <div className={styles.slider}\r\n                 onWheel={(e) => this.wheel(e)}\r\n                 onTouchStart={this.start}\r\n                 onTouchMove={this.move}\r\n                 onTouchEnd={this.end}\r\n                 onMouseDown={this.start}\r\n                 onMouseUp={this.end}\r\n                 onMouseMove={this.move}\r\n\r\n            >\r\n\r\n                <p className={styles.counter}>slide {current + 1} of {total}</p>\r\n\r\n                <ReactTransitionGroup component=\"div\" className={styles.slides}>\r\n                    {collections.map((s, index) =>\r\n                        index === current && <Slide\r\n                            key={index}\r\n                            breadcrumb={`0${index + 1} Â· collection`}\r\n                            dir={direction}\r\n                            handleEndAnimation={this.onEndAnimation}\r\n                            types={types}\r\n                            {...s}\r\n                        />\r\n                    )}\r\n                </ReactTransitionGroup>\r\n\r\n                <div className={styles.nav}>\r\n                    <IconButton onClick={(e) => this.handleClick(e)}\r\n                                value={'prev'}><Arrow/></IconButton>\r\n                    <IconButton onClick={(e) => this.handleClick(e)}\r\n                                value={'next'}><Arrow/></IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const collections = gql`{\r\n  collections: allCollections {\r\n    id\r\n    name\r\n    slug\r\n    displayTitle\r\n    image {\r\n      url\r\n      alt\r\n      width\r\n    }\r\n    intro\r\n  }\r\n  types: allTypes {\r\n    id\r\n    slug\r\n  }\r\n}`;\r\n\r\nexport default graphql(collections)(Slider);\r\n\n\n\n// WEBPACK FOOTER //\n// components/Slider/Slider.js","// Generated by CoffeeScript 1.9.2\n(function() {\n  var root;\n\n  root = typeof exports !== \"undefined\" && exports !== null ? exports : this;\n\n  root.Lethargy = (function() {\n    function Lethargy(stability, sensitivity, tolerance, delay) {\n      this.stability = stability != null ? Math.abs(stability) : 8;\n      this.sensitivity = sensitivity != null ? 1 + Math.abs(sensitivity) : 100;\n      this.tolerance = tolerance != null ? 1 + Math.abs(tolerance) : 1.1;\n      this.delay = delay != null ? delay : 150;\n      this.lastUpDeltas = (function() {\n        var i, ref, results;\n        results = [];\n        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n          results.push(null);\n        }\n        return results;\n      }).call(this);\n      this.lastDownDeltas = (function() {\n        var i, ref, results;\n        results = [];\n        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n          results.push(null);\n        }\n        return results;\n      }).call(this);\n      this.deltasTimestamp = (function() {\n        var i, ref, results;\n        results = [];\n        for (i = 1, ref = this.stability * 2; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {\n          results.push(null);\n        }\n        return results;\n      }).call(this);\n    }\n\n    Lethargy.prototype.check = function(e) {\n      var lastDelta;\n      e = e.originalEvent || e;\n      if (e.wheelDelta != null) {\n        lastDelta = e.wheelDelta;\n      } else if (e.deltaY != null) {\n        lastDelta = e.deltaY * -40;\n      } else if ((e.detail != null) || e.detail === 0) {\n        lastDelta = e.detail * -40;\n      }\n      this.deltasTimestamp.push(Date.now());\n      this.deltasTimestamp.shift();\n      if (lastDelta > 0) {\n        this.lastUpDeltas.push(lastDelta);\n        this.lastUpDeltas.shift();\n        return this.isInertia(1);\n      } else {\n        this.lastDownDeltas.push(lastDelta);\n        this.lastDownDeltas.shift();\n        return this.isInertia(-1);\n      }\n      return false;\n    };\n\n    Lethargy.prototype.isInertia = function(direction) {\n      var lastDeltas, lastDeltasNew, lastDeltasOld, newAverage, newSum, oldAverage, oldSum;\n      lastDeltas = direction === -1 ? this.lastDownDeltas : this.lastUpDeltas;\n      if (lastDeltas[0] === null) {\n        return direction;\n      }\n      if (this.deltasTimestamp[(this.stability * 2) - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[(this.stability * 2) - 1]) {\n        return false;\n      }\n      lastDeltasOld = lastDeltas.slice(0, this.stability);\n      lastDeltasNew = lastDeltas.slice(this.stability, this.stability * 2);\n      oldSum = lastDeltasOld.reduce(function(t, s) {\n        return t + s;\n      });\n      newSum = lastDeltasNew.reduce(function(t, s) {\n        return t + s;\n      });\n      oldAverage = oldSum / lastDeltasOld.length;\n      newAverage = newSum / lastDeltasNew.length;\n      if (Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) && (this.sensitivity < Math.abs(newAverage))) {\n        return direction;\n      } else {\n        return false;\n      }\n    };\n\n    Lethargy.prototype.showLastUpDeltas = function() {\n      return this.lastUpDeltas;\n    };\n\n    Lethargy.prototype.showLastDownDeltas = function() {\n      return this.lastDownDeltas;\n    };\n\n    return Lethargy;\n\n  })();\n\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lethargy/lethargy.js\n// module id = ./node_modules/lethargy/lethargy.js\n// module chunks = 6 7"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAEA;AAHA;AAAA;AAAA;AAOA;AACA;AAGA;AAJA;AAMA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;;;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;AApIA;AACA;AAsIA;AACA;AAkBA;AACA;AADA;;;;;;;;;;;;AA1JA;AAuIA;;;;;;;;;;;;;AClsourceRoot":""}